{"version":3,"file":"/home/walmir/ProjetosExtras/loldesign-back/src/controllers/userController.ts","sources":["/home/walmir/ProjetosExtras/loldesign-back/src/controllers/userController.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,yDAAkD;AAClD,oDAA6C;AAE7C,MAAqB,cAAc;IAExB,MAAM,CAAO,KAAK,CAAE,GAAY,EAAC,GAAa;;YAC7C,IAAI;gBACA,MAAM,MAAM,GAAG,MAAM,qBAAW,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAEjD,IAAI,CAAC,MAAM,EAAE;oBACX,OAAO,GAAG,CAAC,MAAM,CAAC,oBAAU,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC,CAAC;iBAC7F;gBAED,OAAO,GAAG,CAAC,MAAM,CAAC,oBAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC/C;YAAC,OAAO,GAAG,EAAE;gBACZ,OAAO,GAAG,CAAC,MAAM,CAAC,oBAAU,CAAC,YAAY,CAAC;qBACvC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC;aAC9B;QACT,CAAC;KAAA;IAAA,CAAC;IAEG,MAAM,CAAO,MAAM,CAAE,GAAY,EAAC,GAAa;;YAClD,IAAI;gBACA,MAAM,OAAO,GAAG,MAAM,qBAAW,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAEnD,IAAG,CAAC,OAAO;oBAAE,OAAO,GAAG,CAAC,MAAM,CAAC,oBAAU,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,wBAAwB,EAAC,CAAC,CAAC;gBAEjG,OAAO,GAAG,CAAC,MAAM,CAAC,oBAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;aAEtD;YAAC,OAAO,GAAG,EAAE;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,oBAAU,CAAC,YAAY,CAAC;qBACvC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC;aAC9B;QACT,CAAC;KAAA;IAEM,MAAM,CAAC,QAAQ,CAAE,GAAY,EAAE,GAAa,EAAE,IAAkB;QACnE,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC;QAC1B,MAAM,UAAU,GAAE,qBAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAEjD,IAAG,UAAU,CAAC,KAAK,EAAC;YAChB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,OAAO,EAAC,CAAC,CAAA;SAC5D;QAED,OAAO,IAAI,EAAE,CAAA;IACjB,CAAC;CAEF;AA1CD,iCA0CC","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport UserService from '../services/userService';\nimport StatusCode from '../Utils/StatusCode';\n\nexport default class UserController  {\n    \n    public static async login (req: Request,res: Response): Promise<typeof res>  {\n            try {\n                const result = await UserService.login(req.body);\n            \n                if (!result) {\n                  return res.status(StatusCode.UNAUTHORIZED).json({ message: 'Incorrect email or password' });\n                }\n            \n                return res.status(StatusCode.OK).json(result);\n              } catch (err) {\n                return res.status(StatusCode.UNAUTHORIZED)\n                  .json({ error: `${err}` });\n              }\n      };\n\n    public static async create (req: Request,res: Response): Promise<typeof res> {\n        try {\n            const newUser = await UserService.create(req.body);\n\n            if(!newUser) return res.status(StatusCode.BAD_REQUEST).json({message: 'User already registred'});\n\n            return res.status(StatusCode.CREATED).json(newUser)\n            \n        } catch (err) {\n            return res.status(StatusCode.UNAUTHORIZED)\n              .json({ error: `${err}` });\n          }\n  }\n\n  public static validate (req: Request, res: Response, next: NextFunction) {\n      const userInfo = req.body;\n      const validation= UserService.validate(userInfo);\n\n      if(validation.error){\n          res.status(500).json({message: validation.error.message})\n      }\n\n      return next()\n  }\n  \n}\n\n\n\n"]}