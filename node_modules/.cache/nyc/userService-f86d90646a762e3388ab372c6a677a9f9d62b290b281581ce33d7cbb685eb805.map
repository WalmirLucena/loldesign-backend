{"version":3,"file":"/home/walmir/ProjetosExtras/loldesign-back/src/services/userService.ts","sources":["/home/walmir/ProjetosExtras/loldesign-back/src/services/userService.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,uCAAuC;AACvC,qDAA+C;AAE/C,yCAAkC;AAClC,8DAAiE;AAEjE,MAAqB,WAAW;IAErB,MAAM,CAAO,KAAK,CAAE,IAAY;;YACnC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;YAEjC,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;YAEtD,IAAI,CAAC,IAAI;gBAAE,OAAO,KAAK,CAAC;YAExB,MAAM,aAAa,GAAG,IAAA,sBAAW,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE3D,IAAI,CAAC,aAAa;gBAAE,OAAO,KAAK,CAAC;YAEjC,MAAM,YAAY,GAAG;gBACjB,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,KAAK;aACL,CAAC;YAEL,OAAO,YAAY,CAAC;QACtB,CAAC;KAAA;IAAA,CAAC;IAEG,MAAM,CAAO,MAAM,CAAE,IAAW;;YACnC,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAC,GAAG,IAAI,CAAC;YAEzC,MAAM,SAAS,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAC,QAAQ,EAAC,EAAC,CAAC,CAAC;YAE3D,IAAG,SAAS;gBAAE,OAAO,KAAK,CAAC;YAE3B,MAAM,cAAc,GAAG,IAAA,uCAAqB,EAAC,QAAQ,CAAC,CAAC;YAEvD,MAAM,OAAO,GAAG,MAAM,cAAI,CAAC,MAAM,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAC,cAAc,EAAE,QAAQ,EAAC,CAAC,CAAA;YAE7E,OAAO;gBACH,EAAE,EAAE,OAAO,CAAC,EAAE;gBACd,KAAK;gBACL,QAAQ;aACX,CAAA;QACL,CAAC;KAAA;IAEM,MAAM,CAAO,QAAQ,CAAE,EAAU;;YACpC,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;YACpC,OAAO,EAAC,EAAE,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,EAAC,CAAA;QACzB,CAAC;KAAA;IAEM,MAAM,CAAO,UAAU,CAAE,IAAY;;YACxC,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAC,CAAC,CAAA;YAC5D,OAAO,EAAC,EAAE,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,EAAC,CAAA;QACzB,CAAC;KAAA;IAEM,MAAM,CAAC,QAAQ,CAAE,QAAe;QACnC,OAAO,oBAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;CAEF;AAtDH,8BAsDG","sourcesContent":["import { compareSync } from 'bcryptjs';\nimport userSchema  from '../Schema/userSchema';\nimport { ILogin, IModel, IUser } from '../interfaces/userInterface';\nimport User from '../models/user';\nimport { generateCriptPassword } from '../Utils/bcryptFunctions';\n\nexport default class UserService  {\n      \n    public static async login (data: ILogin): Promise<boolean | IModel>  {\n        const { email, password } = data;\n      \n        const user = await User.findOne({ where: { email } });\n      \n        if (!user) return false;\n      \n        const passwordCheck = compareSync(password, user.password);\n      \n        if (!passwordCheck) return false;\n      \n        const userFiltered = {\n            id: user.id,\n            username: user.username,\n            email,\n           };\n      \n        return userFiltered;\n      };\n\n    public static async create (data: IUser) {\n        const {email, password, username} = data;\n\n        const checkUser = await User.findOne({ where: {username}});\n\n        if(checkUser) return false;\n        \n        const securePassword = generateCriptPassword(password);      \n\n        const newUser = await User.create({email, password:securePassword, username})\n\n        return {\n            id: newUser.id,\n            email,\n            username\n        }\n    }\n\n    public static async findById (id: number) {\n        const user = await User.findByPk(id)\n        return {id: user?.id}\n    }\n\n    public static async findByName (name: string) {\n        const user = await User.findOne({where: { username: name }})\n        return {id: user?.id}\n    }\n\n    public static validate (userInfo: IUser) {\n        return userSchema.validate(userInfo);\n    }\n\n  } \n\n\n\n"]}