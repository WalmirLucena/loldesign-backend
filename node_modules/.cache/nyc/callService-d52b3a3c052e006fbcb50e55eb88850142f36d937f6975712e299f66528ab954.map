{"version":3,"file":"/home/walmir/ProjetosExtras/loldesign-back/src/services/callService.ts","sources":["/home/walmir/ProjetosExtras/loldesign-back/src/services/callService.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAAkC;AAElC,2CAAmC;AACnC,4DAAyD;AACzD,+CAAwC;AAExC,MAAqB,WAAW;IAErB,MAAM,CAAO,MAAM,CAAE,IAAc;;YACtC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YAEnD,MAAM,EAAC,KAAK,EAAE,aAAa,EAAC,GAAG,IAAA,+BAAc,EAAC,IAAI,CAAC,CAAC;YAEpD,MAAM,MAAM,GAAG,MAAM,qBAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAElD,MAAM,IAAI,GAAG,MAAM,eAAI,CAAC,MAAM,CAAC,EAAC,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,aAAa,EAAC,CAAC,CAAA;YAEtG,MAAM,YAAY,GAAG;gBACjB,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,MAAM;gBACN,OAAO;gBACP,IAAI;gBACJ,IAAI;gBACJ,KAAK;gBACL,aAAa;aACb,CAAC;YAEL,OAAO,YAAY,CAAC;QACtB,CAAC;KAAA;IAAA,CAAC;IAEK,MAAM,CAAO,IAAI;;YACpB,MAAM,KAAK,GAAG,MAAM,eAAI,CAAC,OAAO,CAAC;gBAC7B,OAAO,EAAE;oBACL,EAAC,KAAK,EAAE,cAAI,EAAE,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,UAAU,CAAC,EAAE;iBACxD;aACJ,CAAC,CAAC;YACH,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;IAEM,MAAM,CAAO,OAAO,CAAE,EAAS;;YACpC,MAAM,QAAQ,GAAG,MAAM,qBAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAChD,MAAM,IAAI,GAAG,MAAM,eAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE;oBACrC,MAAM,EAAE,QAAQ,CAAC,EAAE;iBACtB,EAAC,CAAC,CAAC;YACJ,OAAO,IAAI,CAAC;QAEd,CAAC;KAAA;IAEM,MAAM,CAAO,MAAM,CAAE,MAAc,EAAE,MAAc;;YAEtD,MAAM,eAAI,CAAC,OAAO,CAAC,EAAC,KAAK,EAAE;oBACvB,EAAE,EAAE,MAAM;iBACb,EAAC,CAAC,CAAC;YACJ,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;YACvC,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;CAGJ;AArDH,8BAqDG","sourcesContent":["import User from '../models/user';\nimport { CallData, ICall } from '../interfaces/callInterface';\nimport Call from '../models/calls';\nimport { calculatePrice } from '../Utils/calculatePrice';\nimport UserService from './userService';\n\nexport default class CallService  {\n      \n    public static async create (data: CallData): Promise<boolean | ICall>  {\n        const { origin, destiny, time, plan, name } = data;\n\n        const {price, priceWithPlan} = calculatePrice(data);        \n\n        const userId = await UserService.findByName(name);\n          \n        const call = await Call.create({userId: userId.id, origin, destiny, time, plan, price, priceWithPlan})                  \n      \n        const callFiltered = {\n            id: call.id,\n            userId: call.userId,\n            origin,\n            destiny,\n            time,\n            plan,\n            price,\n            priceWithPlan\n           };\n      \n        return callFiltered;\n      };\n\n      public static async read (): Promise<Call[]> {\n          const calls = await Call.findAll({\n              include: [\n                  {model: User, as: 'users', attributes: ['username'] }\n              ]\n          });\n          return calls;\n      }\n\n      public static async getById (id:number): Promise<Call[] | null>{\n        const response = await UserService.findById(id);\n        const call = await Call.findAll({ where: {\n            userId: response.id\n        }});\n        return call;\n\n      }\n\n      public static async delete (callId: number, userId: number): Promise<Call[] | null> {\n\n          await Call.destroy({where: {\n              id: callId\n          }});\n          const call = await this.getById(userId)\n          return call;\n      }\n\n\n  } \n\n\n\n"]}